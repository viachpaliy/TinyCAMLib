using System;
using System.Numerics;
using System.Collections.Generic;   
using System.Linq;
using System.Text;
using TinyCAMLib;

namespace SimplePostProcessor
{
    class Program
    {
        static void Main(string[] args)
        {
            var stlFile = "../../stl/StlExample.stl";
            var surface = STLSurf.LoadFromBinarySTL(stlFile);
            surface.Scale(1000f); // Convert from meters to mm 
            Console.WriteLine($"Loaded STL surface with {surface.Triangles.Count} triangles.");
            Console.WriteLine("Size: " +
                $"{surface.BoundingBox.Size.X} x {surface.BoundingBox.Size.Y} x {surface.BoundingBox
                .Size.Z} mm");
            var cutter = new MillingCutter(MillingCutterType.BallNose, 3.0f, 1.5f, 20.0f);
            var toolPath = ToolPathCreator.CreateToolPath(ToolPathType.Cross, cutter, surface, 0.2f, 0.1f, -5.9f); 

            var outputFile = "example.gcode";
            using (var writer = new System.IO.StreamWriter(outputFile))
            {
                writer.WriteLine("(G-code generated by SimplePostProcessor)");
                writer.WriteLine("G21 ");
                writer.WriteLine("(Set units to millimeters)");
                writer.WriteLine("G17G90");
                writer.WriteLine("(Set XY plane and absolute positioning)");
                writer.WriteLine("(Tool: D = 3.0 mm  type BALLNOSE flutes 2)");
                writer.WriteLine("S12000M03");
                writer.WriteLine("(Spindle speed 12000 RPM, clockwise rotation)");
                writer.WriteLine("G00 Z10.0");
                var startPoint = toolPath.First();
                writer.WriteLine($"G00 X{startPoint.X} Y{startPoint.Y}");
                writer.WriteLine("G01 Z0 F1000");
                foreach (var point in toolPath)
                {
                    writer.WriteLine($"X{point.X} Y{point.Y} Z{point.Z}");
                }
                writer.WriteLine("G00 Z10.0");
                writer.WriteLine("M05");
                writer.WriteLine("(Spindle stop)");
                writer.WriteLine("G00 X0 Y0");
                writer.WriteLine("(Return to home position)");
                writer.WriteLine("M30");
                writer.WriteLine("(End of program)");
            }

            Console.WriteLine($"Tool path written to {outputFile}");
            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();   
        }
    }
}
